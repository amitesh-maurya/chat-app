// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  status    String?
  isOnline  Boolean  @default(false)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Sent friend requests
  sentFriendRequests     FriendRequest[] @relation("SentRequests")
  // Received friend requests  
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")

  // Friends (user is friend1)
  friendships1 Friendship[] @relation("User1")
  // Friends (user is friend2)
  friendships2 Friendship[] @relation("User2")

  // Sent messages
  sentMessages     Message[] @relation("Sender")
  // Received messages
  receivedMessages Message[] @relation("Receiver")

  // Message reactions
  messageReactions MessageReaction[]

  @@map("users")
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String   @default("PENDING") // "PENDING", "ACCEPTED", "REJECTED"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friendship {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())

  user1 User @relation("User1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2 User @relation("User2", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@map("friendships")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  type       String   @default("text") // "text", "image", "voice", "file"
  fileUrl    String?  // URL to uploaded file
  fileName   String?  // Original filename
  fileSize   Int?     // File size in bytes
  duration   Int?     // Duration for voice messages in seconds
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  readAt     DateTime?

  sender   User @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  // Message reactions
  reactions MessageReaction[]

  @@map("messages")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_reactions")
}